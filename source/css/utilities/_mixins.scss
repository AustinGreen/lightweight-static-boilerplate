// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors

@mixin e($element) {
	&__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Media queries

@mixin mq($break) {
  @if $break == "mobile" {
    @media (#{$bp-larger-than-mobile}) {
      @content;
    }
  }
  @else if $break == "phablet" {
    @media (#{$bp-larger-than-phablet}) {
      @content;
    }
  }
  @else if $break == "tablet" {
    @media (#{$bp-larger-than-tablet}) {
      @content;
    }
  }
  @else if $break == "desktop" {
    @media (#{$bp-larger-than-desktop}) {
      @content;
    }
  }
  @else if $break == "desktophd" {
    @media (#{$bp-larger-than-desktophd}) {
      @content;
    }
  }
   @else {
   	@error "Whoops! No value could be retrieved for `#{$break}`. "
  }
}

// Generate modifier color classes
@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;    
		}
	}
}

// Generating :before or :after pseudo-element shapes
@mixin p-el(
	$el,
	$el-w: null,
	$el-h: null) {
	@if $el == "before" or $el == "after" { 
	  &:#{$el} {
		  @extend %pseudos;
		  width: $el-w;
	  	height: $el-h;
	    @content;
	  }
	} 
	@else {
    @error "`#{$el}` is not a valid pseudo-element.";
	}
}

// Image replacement
@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}
      
// Adjacent sibling margins
@mixin doubly($margin: 1em) {
	& + & {
	  margin-left: $margin;
    @content;
	}
}
       